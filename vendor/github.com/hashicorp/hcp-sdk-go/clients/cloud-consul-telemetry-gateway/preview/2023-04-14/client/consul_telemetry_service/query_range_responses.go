// Code generated by go-swagger; DO NOT EDIT.

package consul_telemetry_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-consul-telemetry-gateway/preview/2023-04-14/models"
	cloud "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
)

// QueryRangeReader is a Reader for the QueryRange structure.
type QueryRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewQueryRangeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQueryRangeOK creates a QueryRangeOK with default headers values
func NewQueryRangeOK() *QueryRangeOK {
	return &QueryRangeOK{}
}

/*
QueryRangeOK describes a response with status code 200, with default header values.

A successful response.
*/
type QueryRangeOK struct {
	Payload *models.HashicorpCloudConsulTelemetry20230414QueryRangeResponse
}

// IsSuccess returns true when this query range o k response has a 2xx status code
func (o *QueryRangeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query range o k response has a 3xx status code
func (o *QueryRangeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query range o k response has a 4xx status code
func (o *QueryRangeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query range o k response has a 5xx status code
func (o *QueryRangeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query range o k response a status code equal to that given
func (o *QueryRangeOK) IsCode(code int) bool {
	return code == 200
}

func (o *QueryRangeOK) Error() string {
	return fmt.Sprintf("[POST /ctgw/2023-04-14/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{cluster_id}/query_range][%d] queryRangeOK  %+v", 200, o.Payload)
}

func (o *QueryRangeOK) String() string {
	return fmt.Sprintf("[POST /ctgw/2023-04-14/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{cluster_id}/query_range][%d] queryRangeOK  %+v", 200, o.Payload)
}

func (o *QueryRangeOK) GetPayload() *models.HashicorpCloudConsulTelemetry20230414QueryRangeResponse {
	return o.Payload
}

func (o *QueryRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HashicorpCloudConsulTelemetry20230414QueryRangeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRangeDefault creates a QueryRangeDefault with default headers values
func NewQueryRangeDefault(code int) *QueryRangeDefault {
	return &QueryRangeDefault{
		_statusCode: code,
	}
}

/*
QueryRangeDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type QueryRangeDefault struct {
	_statusCode int

	Payload *cloud.GoogleRPCStatus
}

// Code gets the status code for the query range default response
func (o *QueryRangeDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this query range default response has a 2xx status code
func (o *QueryRangeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this query range default response has a 3xx status code
func (o *QueryRangeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this query range default response has a 4xx status code
func (o *QueryRangeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this query range default response has a 5xx status code
func (o *QueryRangeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this query range default response a status code equal to that given
func (o *QueryRangeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *QueryRangeDefault) Error() string {
	return fmt.Sprintf("[POST /ctgw/2023-04-14/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{cluster_id}/query_range][%d] QueryRange default  %+v", o._statusCode, o.Payload)
}

func (o *QueryRangeDefault) String() string {
	return fmt.Sprintf("[POST /ctgw/2023-04-14/organizations/{location.organization_id}/projects/{location.project_id}/clusters/{cluster_id}/query_range][%d] QueryRange default  %+v", o._statusCode, o.Payload)
}

func (o *QueryRangeDefault) GetPayload() *cloud.GoogleRPCStatus {
	return o.Payload
}

func (o *QueryRangeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(cloud.GoogleRPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
QueryRangeBody QueryRangeRequest
//
// QueryRangeRequest is based off https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries but doesn't allow arbrirtary
// queries.
//
// Instead we have a QueryRangeType that is passed as a lookup on the backend. Note that the result of any new type
// must always return a MetricMatrix as shown in the response below
swagger:model QueryRangeBody
*/
type QueryRangeBody struct {

	// end
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// location
	Location *QueryRangeParamsBodyLocation `json:"location,omitempty"`

	// query
	Query *models.HashicorpCloudConsulTelemetry20230414QRT `json:"query,omitempty"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// step
	Step string `json:"step,omitempty"`
}

// Validate validates this query range body
func (o *QueryRangeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryRangeBody) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(o.End) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"end", "body", "date-time", o.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *QueryRangeBody) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(o.Location) { // not required
		return nil
	}

	if o.Location != nil {
		if err := o.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *QueryRangeBody) validateQuery(formats strfmt.Registry) error {
	if swag.IsZero(o.Query) { // not required
		return nil
	}

	if o.Query != nil {
		if err := o.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "query")
			}
			return err
		}
	}

	return nil
}

func (o *QueryRangeBody) validateStart(formats strfmt.Registry) error {
	if swag.IsZero(o.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"start", "body", "date-time", o.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this query range body based on the context it is used
func (o *QueryRangeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryRangeBody) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.Location != nil {
		if err := o.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *QueryRangeBody) contextValidateQuery(ctx context.Context, formats strfmt.Registry) error {

	if o.Query != nil {
		if err := o.Query.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryRangeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryRangeBody) UnmarshalBinary(b []byte) error {
	var res QueryRangeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryRangeParamsBodyLocation Location represents a target for an operation in HCP.
swagger:model QueryRangeParamsBodyLocation
*/
type QueryRangeParamsBodyLocation struct {

	// region is the region that the resource is located in. It is
	// optional if the object being referenced is a global object.
	Region *cloud.HashicorpCloudLocationRegion `json:"region,omitempty"`
}

// Validate validates this query range params body location
func (o *QueryRangeParamsBodyLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryRangeParamsBodyLocation) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this query range params body location based on the context it is used
func (o *QueryRangeParamsBodyLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryRangeParamsBodyLocation) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {
		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryRangeParamsBodyLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryRangeParamsBodyLocation) UnmarshalBinary(b []byte) error {
	var res QueryRangeParamsBodyLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
